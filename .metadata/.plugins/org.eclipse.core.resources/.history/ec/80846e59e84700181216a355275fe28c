import java.awt.*;
import java.awt.font.*;
import java.awt.geom.*;
import java.awt.image.BufferedImage;
import java.text.*;
import java.util.*;
import java.util.List; // resolves problem with java.awt.List and java.util.List

/**
 * A class that represents a picture.  This class inherits from 
 * SimplePicture and allows the student to add functionality to
 * the Picture class.  
 * 
 * @author Barbara Ericson ericson@cc.gatech.edu
 */
public class Picture extends SimplePicture 
{
  ///////////////////// constructors //////////////////////////////////
  
  /**
   * Constructor that takes no arguments 
   */
  public Picture ()
  {
    /* not needed but use it to show students the implicit call to super()
     * child constructors always call a parent constructor 
     */
    super();  
  }
  
  /**
   * Constructor that takes a file name and creates the picture 
   * @param fileName the name of the file to create the picture from
   */
  public Picture(String fileName)
  {
    // let the parent class handle this fileName
    super(fileName);
  }
  
  /**
   * Constructor that takes the width and height
   * @param height the height of the desired picture
   * @param width the width of the desired picture
   */
  public Picture(int height, int width)
  {
    // let the parent class handle this width and height
    super(width,height);
  }
  
  /**
   * Constructor that takes a picture and creates a 
   * copy of that picture
   * @param copyPicture the picture to copy
   */
  public Picture(Picture copyPicture)
  {
    // let the parent class do the copy
    super(copyPicture);
  }
  
  /**
   * Constructor that takes a buffered image
   * @param image the buffered image to use
   */
  public Picture(BufferedImage image)
  {
    super(image);
    
  }
  
  ////////////////////// methods ///////////////////////////////////////
  
  /**
   * Method to return a string with information about this picture.
   * @return a string with information about the picture such as fileName,
   * height and width.
   */
  public String toString()
  {
    String output = "Picture, filename " + getFileName() + 
      " height " + getHeight() 
      + " width " + getWidth();
    return output;
    
  }
  
  /** Method to set the blue to 0 */
  public void zeroBlue()
  {
    Pixel[][] pixels = this.getPixels2D();
    for (Pixel[] rowArray : pixels)
    {
      for (Pixel pixelObj : rowArray)
      {
        pixelObj.setBlue(0);
      }
    }
  }
  
  /** Method that mirrors the picture around a 
    * vertical mirror in the center of the picture
    * from left to right */
  public void mirrorVertical()
  {
    Pixel[][] pixels = this.getPixels2D();
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int width = pixels[0].length;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; col < width / 2; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][width - 1 - col];
        rightPixel.setColor(leftPixel.getColor());
      }
    } 
  }
  
  /** Mirror just part of a picture of a temple */
  public void mirrorTemple()
  {
    int mirrorPoint = 276;
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    int count = 0;
    Pixel[][] pixels = this.getPixels2D();
    
    // loop through the rows
    for (int row = 27; row < 97; row++)
    {
      // loop from 13 to just before the mirror point
      for (int col = 13; col < mirrorPoint; col++)
      {
        
        leftPixel = pixels[row][col];      
        rightPixel = pixels[row]                       
                         [mirrorPoint - col + mirrorPoint];
        rightPixel.setColor(leftPixel.getColor());
      }
    }
  }
  
  /** copy from the passed fromPic to the
    * specified startRow and startCol in the
    * current picture
    * @param fromPic the picture to copy from
    * @param startRow the start row to copy to
    * @param startCol the start col to copy to
    */
  public void copy(Picture fromPic, 
                 int startRow, int startCol)
  {
    Pixel fromPixel = null;
    Pixel toPixel = null;
    Pixel[][] toPixels = this.getPixels2D();
    Pixel[][] fromPixels = fromPic.getPixels2D();
    for (int fromRow = 0, toRow = startRow; 
         fromRow < fromPixels.length &&
         toRow < toPixels.length; 
         fromRow++, toRow++)
    {
      for (int fromCol = 0, toCol = startCol; 
           fromCol < fromPixels[0].length &&
           toCol < toPixels[0].length;  
           fromCol++, toCol++)
      {
        fromPixel = fromPixels[fromRow][fromCol];
        toPixel = toPixels[toRow][toCol];
        toPixel.setColor(fromPixel.getColor());
      }
    }   
  }

  /** Method to create a collage of several pictures */
  public void createCollage()
  {
    Picture flower1 = new Picture("flower1.jpg");
    Picture flower2 = new Picture("flower2.jpg");
    this.copy(flower1,0,0);
    this.copy(flower2,100,0);
    this.copy(flower1,200,0);
    Picture flowerNoBlue = new Picture(flower2);
    flowerNoBlue.zeroBlue();
    this.copy(flowerNoBlue,300,0);
    this.copy(flower1,400,0);
    this.copy(flower2,500,0);
    this.mirrorVertical();
    this.write("collage.jpg");
  }
  
  
  /** Method to show large changes in color 
    * @param edgeDist the distance for finding edges
    */
  public void edgeDetection(int edgeDist)
  {
    Pixel leftPixel = null;
    Pixel rightPixel = null;
    Pixel[][] pixels = this.getPixels2D();
    Color rightColor = null;
    for (int row = 0; row < pixels.length; row++)
    {
      for (int col = 0; 
           col < pixels[0].length-1; col++)
      {
        leftPixel = pixels[row][col];
        rightPixel = pixels[row][col+1];
        rightColor = rightPixel.getColor();
        if (leftPixel.colorDistance(rightColor) > 
            edgeDist)
          leftPixel.setColor(Color.BLACK);
        else
          leftPixel.setColor(Color.WHITE);
      }
    }
  }
  public void keepOnlyBlue()
  {
	    Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setRed(0);
	        pixelObj.setGreen(0);
	      }
	    }
	  }
  
  public void keepOnlyRed()
  {
	    Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setBlue(0);
	        pixelObj.setGreen(0);
	      }
	    }
	  }
  
  public void keepOnlyGreen()
  {
	    Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	        pixelObj.setRed(0);
	        pixelObj.setBlue(0);
	      }
	    }
	  }
  
  public void negate()
  {
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	    	  pixelObj.setRed(255-pixelObj.getRed());
	    	  pixelObj.setBlue(255- pixelObj.getBlue());
	    	  pixelObj.setGreen(255 - pixelObj.getGreen());
	      }
	    }
  }
  public void grayscale()
  {
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
	    	  int avg = ((int)pixelObj.getBlue() + (int)pixelObj.getRed() + (int)pixelObj.getGreen()/3);
	    	  pixelObj.setRed(avg);
		      pixelObj.setBlue(avg);
		      pixelObj.setGreen(avg);
	      }
	   }
  }
  public void fixUnderwater()
  {
	  Pixel[][] pixels = this.getPixels2D();
	    for (Pixel[] rowArray : pixels)
	    {
	      for (Pixel pixelObj : rowArray)
	      {
		      pixelObj.setBlue(pixelObj.getBlue()-75);
		      pixelObj.setGreen(pixelObj.getGreen()-100);
	      }
	    }
  }
  
  public void sharpen(int x, int y, int w, int h)
  { 
	  Pixel pixel = null;
      Pixel samplePixel = null;
      Pixel pixUp = null;
      int avgColor = 0;
	  System.out.println("Presley Silahian, Period 2, C34");
	  Pixel[][] pixels = this.getPixels2D();
	  for (int row = x; row < w; row++) {
		  for (int col = y; col < h; col++) {
	    	  pixel = this.getPixel(x,y);
	    	  pixUp = this.getPixel(x-1,y-1);
		      avgColor = (pixel.getCol() - pixUp.getCol()/2);
		      pixel.setBlue(pixel.getBlue() + avgColor);
		      pixel.setGreen(pixel.getGreen() + avgColor);
		      pixel.setRed(pixel.getRed() + avgColor);
	      }
	  }
  }
  public void blur(int numPixels)
	    {
	      Pixel pixel = null;
	      Pixel samplePixel = null;
	      int redValue = 0;
	      int greenValue = 0;
	      int blueValue = 0;
	      int count = 0;

	      // loop through the pixels
	      for (int x=0; x < this.getWidth(); x++) {
	        for (int y=0; y < this.getHeight(); y++) {

	          // get the current pixel
	        	pixel = this.getPixel(x,y);

	          // reset the count and red, green, and blue values
	          count = 0;
	          redValue = greenValue = blueValue = 0;

	          // loop through pixel numPixels before x to numPixels after x
	          for (int xSample = x - numPixels; 
	               xSample <= x + numPixels; 
	               xSample++) {
	            for (int ySample = y - numPixels; 
	                 ySample <= y + numPixels;
	                 ySample++) {

	              // check that we are in the range of acceptable pixels
	              if (xSample >= 0 && xSample < this.getWidth() &&
	                  ySample >= 0 && ySample < this.getHeight()) {
	                samplePixel = this.getPixel(xSample,ySample);
	                redValue = redValue + samplePixel.getRed();
	                greenValue = greenValue + samplePixel.getGreen();
	                blueValue = blueValue + samplePixel.getBlue();
	                count = count + 1;
	              }
	            }
	          }

	          // use average color of surrounding pixels
	          Color newColor = new Color(redValue / count,
	                                     greenValue / count,
	                                     blueValue / count);
	          pixel.setColor(newColor);
	        }
	      }
	    }
	      
  public void mirrorArms()
  {
	  int mirror = 220;
	  Pixel origUpperPixel = null;
	  Pixel newLowerPixel = null;
	  Pixel[][] pixels = this.getPixels2D();

	  for (int row = 159; row < 194; row++) {
		  for (int col = 104; col < 170; col++) {
			  origUpperPixel = pixels[row][col];
			  newLowerPixel = pixels[mirror - row + mirror][col];
			  newLowerPixel.setColor(origUpperPixel.getColor());
			}

		  for (int col = 239; col < 295; col++) {
			  origUpperPixel = pixels[row][col];
			  newLowerPixel = pixels[mirror - row + mirror][col];
			  newLowerPixel.setColor(origUpperPixel.getColor());
			}
		}
  }
  public void mirrorGull()
  {
	  int mirror = 350;
	  Pixel origLeftPixel = null;
	  Pixel newRightPixel = null;
	  Pixel[][] pixels = this.getPixels2D();

	  for (int row = 230; row < 327; row++) {
		  for (int col = 230; col < 348; col++) {
			  origLeftPixel = pixels[row][col];
			  newRightPixel = pixels[row][mirror - col + mirror];
			  newRightPixel.setColor(origLeftPixel.getColor());
			}
		}
  }
  public void mirrorDiagonal()
  {
	  Pixel origPixel = null;
	  Pixel newPixel = null;
	  Pixel[][] pixels = this.getPixels2D();
	  for (int row = 0; row < pixels.length; row++) {
			for (int col = 0; col < pixels[0].length; col++) {
				if (col < pixels.length) {
					origPixel = pixels[col][row];
					newPixel = pixels[row][col];
					newPixel.setColor(origPixel.getColor());
				}
			}
		}
  }
  
  /* Main method for testing - each class in Java can have a main 
   * method 
   */
  public static void main(String[] args) 
  {
    Picture beach = new Picture("beach.jpg");
    beach.explore();
    beach.zeroBlue();
    beach.explore();
  }
  
} // this } is the end of class Picture, put all new methods before this
