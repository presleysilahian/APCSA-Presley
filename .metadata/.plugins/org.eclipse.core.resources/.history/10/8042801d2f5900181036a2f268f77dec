//© A+ Computer Science  -  www.apluscompsci.com
//Name -
//Date -
//Class -
//Lab  -

import java.awt.Color;
import java.awt.Graphics;
import java.util.ArrayList;

public class Block implements Locatable, Collidable
{
	private ArrayList<Block> topBlocks = new ArrayList<Block>(); 
	private ArrayList<Block> bottomBlocks = new ArrayList<Block>(); 
	private ArrayList<Block> rightBlocks = new ArrayList<Block>(); 
	private ArrayList<Block> leftBlocks = new ArrayList<Block>(); 
	private int xPos;
	private int yPos;
	private int width;
	private int height;
	private Block block;
	private int blocksLeft;

	private Color color;

	public Block()
	{
		setPos(100, 150);
		setWidth(10);
		setHeight(10);
		setColor(Color.BLACK);
	}
	public Block(int x, int y)
	{
		setPos(x,y);
		setWidth(10);
		setHeight(10);
		setColor(Color.BLACK);
	}
	public Block(int x, int y, int w, int h)
	{
		setPos(x, y);
		setWidth(w);
		setHeight(h);
		setColor(Color.BLACK);
	}
	public Block(int x, int y, int w, int h, Color col)
	{
		setPos(x,y);
		setWidth(w);
		setHeight(h);
		setColor(col);
	}
	public void setPos(int x, int y)
	{
		xPos = x;
		yPos = y;
	}
	public void setX(int x)
	{
		xPos = x;
	}
	public void setY(int y)
	{
		yPos = y;
	}
	public void setWidth(int w)
	{
		width = w;
	}
	public void setHeight(int h)
	{
		height = h;
	}
	public void setColor(Color col)
	{
		color = col;
	}
	public int getX() {
   		return xPos;
   	}
   	
   	public int getY() {
   		return yPos;
   	}

	public int getWidth() {
		return width;
	}

   	public int getHeight() {
		return height;
	}
   	
   	public Color getColor() {
   		return color;
   	}
	
   	public void draw(Graphics window)
   	{
   		window.setColor(color);
   		window.fillRect(getX(), getY(), getWidth(), getHeight());
   	}

    public void draw(Graphics window, Color col)
    {
    	window.setColor(col);
   		window.fillRect(getX(), getY(), getWidth(), getHeight());
    }
   
   	public boolean equals(Object obj)
	{
   		Block other = (Block) obj;
   		return this.getX() == other.getX() && this.getY() == other.getY()
   				&& this.getWidth() == other.getWidth() 
   				&& this.getHeight() == other.getHeight();
	}
   	public void printBlocks()
   	{
   		int xValTop = 25;
		int yValTop = 0;
		for (int i = 0; i < 2; i++) {
			yValTop+= 20;
			xValTop = 25; 
			for (int j = 0; j < 18; j++) {
				topBlocks.add(block = new Block(xValTop,yValTop,35,15,Color.BLUE));
				xValTop+=40;
				blocksLeft++;
			}
		}
		int xValBottom = 25;
		int yValBottom = 480;
		for (int i = 0; i < 2; i++) {
			xValBottom= 25;
			yValBottom +=20;
			for (int j = 0; j < 18; j++) {
				bottomBlocks.add(block = new Block(xValBottom,yValBottom,35,15, Color.BLUE));
				xValBottom += 40;
				blocksLeft++;
			}
		}
		int xValLeft = 25;
		int yValLeft = 40;
		for (int i = 0; i < 22; i++){
			xValLeft = 25;
			yValLeft+=20;
			for (int j = 0; j < 2; j++){
				leftBlocks.add(block = new Block(xValLeft, yValLeft, 35, 15, Color.BLUE));
				xValLeft+=40;
				blocksLeft++;
			}
		}
		int xValRight = 665;
		int yValRight = 40;
		for (int i = 0; i < 22; i++){
			xValRight = 665;
			yValRight+=20;
			for (int j = 0; j < 2; j++){
				rightBlocks.add(block = new Block(xValRight, yValRight, 35, 15, Color.BLUE));
				xValRight+=40;
				blocksLeft++;
			}
		}
   	}
   	public void removeBlocks()
   	{
   		for (int i = 0; i < topBlocks.size(); i++){
   			
   		}
   	}
   	public int getBlocksLeft(){
   		return blocksLeft;
   	}
   	public ArrayList getTopBlocks(){
   		return topBlocks;
   	}
   	public ArrayList getBottomBlocks(){
   		return bottomBlocks;
   	}
   	public ArrayList getLeftBlocks(){
   		return leftBlocks;
   	}
   	public ArrayList getRightBlocks(){
   		return rightBlocks;
   	}
   	
   	public String toString() {
   		return xPos +" "+ yPos +" "+ width +" "+ height +" "+ color;
   	}
   	@Override
   	public boolean didCollideLeft(Block other) {
   		return this.getX() + this.getWidth() >= other.getX();
   	}
   	@Override
   	public boolean didCollideRight(Block other) {
   		return this.getX() <= other.getX() + other.getWidth();
   	}
   	@Override
   	public boolean didCollideTop(Block other) {
   		return this.getY() + this.getHeight() >= other.getY();
   	}
   	@Override
   	public boolean didCollideBottom(Block other) {
   		return this.getY() <= other.getY() + other.getHeight();
   	}
   	
}